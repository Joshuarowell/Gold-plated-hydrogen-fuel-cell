The voltage required to produce hydrogen gas in a fuel cell operating in **electrolysis mode** (or in a dedicated **electrolyzer**) depends on the type of cell and the reaction conditions. Here’s a breakdown:

### **1. Theoretical Minimum Voltage (Thermodynamic Potential)**
- The **minimum voltage** needed to split water (H₂O) into hydrogen (H₂) and oxygen (O₂) is **1.23 volts** under standard conditions (25°C, 1 atm, pH 7).
- This is based on the Gibbs free energy equation:  
  \[
  \Delta G = -nFE
  \]
  Where:
  - \( \Delta G \) = Gibbs free energy change (237 kJ/mol for water)
  - \( n \) = number of electrons (2 per H₂ molecule)
  - \( F \) = Faraday’s constant (~96,485 C/mol)
  - \( E \) = cell potential (1.23 V)

### **2. Actual Operating Voltage (Due to Overpotentials)**
In practice, **higher voltage** is needed due to inefficiencies:
- **Alkaline Electrolyzers**: ~1.8–2.4 V per cell  
- **PEM (Proton Exchange Membrane) Electrolyzers**: ~1.8–2.2 V per cell  
- **Solid Oxide Electrolyzers (High-Temp)**: ~0.9–1.5 V (due to heat assistance)  

These **overpotentials** come from:
- **Activation overpotential** (energy to start the reaction)
- **Ohmic losses** (resistance in materials)
- **Concentration overpotential** (mass transport limits)

### **3. Stack Voltage for Industrial Electrolyzers**
Since a single cell produces only ~2 V, multiple cells are **stacked in series** to achieve higher voltages:
- A **PEM electrolyzer stack** might have 50–200 cells, running at **100–400 V DC**.
- Large industrial systems may use **hundreds of volts** (e.g., 400–600 V) for high-efficiency hydrogen production.

### **4. Power Supply Requirements**
- **Current** is more critical than voltage for hydrogen production rate (Faraday’s Law: **1 A for 1 hour ≈ 0.042 g H₂**).
- A typical **1 MW electrolyzer** might run at **400–600 V DC** with **thousands of amps**.

### **Summary**
| Condition | Voltage per Cell | Typical Stack Voltage |
|-----------|-----------------|-----------------------|
| **Theoretical Minimum** | 1.23 V | N/A |
| **Alkaline Electrolyzer** | 1.8–2.4 V | 100–400 V |
| **PEM Electrolyzer** | 1.8–2.2 V | 100–400 V |
| **Solid Oxide (High-Temp)** | 0.9–1.5 V | 50–300 V |

For **high-efficiency hydrogen production**, systems use **higher voltages (100s of volts)** to drive sufficient current through the stack. The exact voltage depends on the **electrolyzer type, temperature, and design**.



/*
 * Hydrogen Fuel Cell Monitoring System
 * 
 * Monitors:
 * - Voltage output
 * - System pressure
 * - Gas composition (optional)
 * 
 * Sensors assumed:
 * - Voltage divider for fuel cell output voltage
 * - MPX5010DP or similar pressure sensor
 * - MQ-8 hydrogen sensor or similar
 * - Optional: Oxygen sensor (like MQ-131) for gas composition
 */

// Define sensor pins
const int VOLTAGE_SENSOR_PIN = A0;    // Analog input for voltage measurement
const int PRESSURE_SENSOR_PIN = A1;   // Analog input for pressure sensor
const int HYDROGEN_SENSOR_PIN = A2;   // Analog input for hydrogen concentration
const int OXYGEN_SENSOR_PIN = A3;     // Analog input for oxygen concentration (optional)

// Calibration values - adjust based on your specific sensors
const float VOLTAGE_DIVIDER_RATIO = 5.0;  // R2/(R1+R2) - adjust for your voltage divider
const float PRESSURE_SENSOR_MAX = 10.0;   // Maximum pressure in kPa your sensor can measure
const float ADC_REFERENCE_VOLTAGE = 5.0;  // Arduino's analog reference voltage

// Safety thresholds
const float MAX_SAFE_VOLTAGE = 50.0;      // Maximum safe voltage (adjust for your system)
const float MAX_SAFE_PRESSURE = 8.0;      // Maximum safe pressure in kPa
const float HYDROGEN_ALARM_LEVEL = 80.0;  // Percentage of hydrogen that triggers alarm

// Sensor warm-up time (in ms)
const unsigned long SENSOR_WARM_UP_TIME = 30000;

void setup() {
  Serial.begin(9600);
  
  // Initialize sensors
  pinMode(VOLTAGE_SENSOR_PIN, INPUT);
  pinMode(PRESSURE_SENSOR_PIN, INPUT);
  pinMode(HYDROGEN_SENSOR_PIN, INPUT);
  pinMode(OXYGEN_SENSOR_PIN, INPUT);
  
  // Optional: Set up alarm outputs or status LEDs
  // pinMode(ALARM_LED_PIN, OUTPUT);
  
  Serial.println("Hydrogen Fuel Cell Monitoring System");
  Serial.println("Initializing sensors...");
  
  // Allow time for sensors to warm up (especially important for gas sensors)
  unsigned long startTime = millis();
  while (millis() - startTime < SENSOR_WARM_UP_TIME) {
    Serial.print("Warming up sensors: ");
    Serial.print((SENSOR_WARM_UP_TIME - (millis() - startTime)) / 1000);
    Serial.println(" seconds remaining");
    delay(1000);
  }
  
  Serial.println("System ready. Beginning monitoring...");
}

void loop() {
  // Read all sensors
  float voltage = readVoltage();
  float pressure = readPressure();
  float hydrogenPct = readHydrogenPercentage();
  // float oxygenPct = readOxygenPercentage(); // Uncomment if using oxygen sensor
  
  // Display readings
  Serial.println("\n--- Current Readings ---");
  Serial.print("Output Voltage: ");
  Serial.print(voltage);
  Serial.println(" V");
  
  Serial.print("System Pressure: ");
  Serial.print(pressure);
  Serial.println(" kPa");
  
  Serial.print("Hydrogen Concentration: ");
  Serial.print(hydrogenPct);
  Serial.println(" %");
  
  /*
  // Uncomment if using oxygen sensor
  Serial.print("Oxygen Concentration: ");
  Serial.print(oxygenPct);
  Serial.println(" %");
  */
  
  // Check safety thresholds
  checkSafety(voltage, pressure, hydrogenPct);
  
  // Adjust delay based on how often you need readings
  delay(2000); // 2 second delay between readings
}

float readVoltage() {
  // Read analog value and convert to actual voltage
  int rawValue = analogRead(VOLTAGE_SENSOR_PIN);
  float voltage = (rawValue * ADC_REFERENCE_VOLTAGE) / 1023.0;
  
  // Adjust for voltage divider ratio
  voltage = voltage * VOLTAGE_DIVIDER_RATIO;
  
  return voltage;
}

float readPressure() {
  // Read analog value and convert to pressure in kPa
  int rawValue = analogRead(PRESSURE_SENSOR_PIN);
  float voltage = (rawValue * ADC_REFERENCE_VOLTAGE) / 1023.0;
  
  // Convert voltage to pressure (equation depends on your specific sensor)
  // For MPX5010DP: Vout = VS*(0.09*P + 0.04) ± (Pressure Error * Temp. Factor * 0.09 * VS)
  // Where VS is 5V, P is in kPa
  float pressure = (voltage / ADC_REFERENCE_VOLTAGE - 0.04) / 0.09;
  
  // Ensure pressure is within valid range
  pressure = constrain(pressure, 0, PRESSURE_SENSOR_MAX);
  
  return pressure;
}

float readHydrogenPercentage() {
  // Read hydrogen concentration (calibration depends on your specific sensor)
  int rawValue = analogRead(HYDROGEN_SENSOR_PIN);
  
  // Convert to percentage (this is a simplified approach - actual calibration will vary)
  // MQ-8 sensor requires more complex calibration with temperature/humidity compensation
  float voltage = (rawValue * ADC_REFERENCE_VOLTAGE) / 1023.0;
  float hydrogenPct = map(voltage * 100, 0, ADC_REFERENCE_VOLTAGE * 100, 0, 100);
  
  return hydrogenPct;
}

/*
// Uncomment if using oxygen sensor
float readOxygenPercentage() {
  int rawValue = analogRead(OXYGEN_SENSOR_PIN);
  // Conversion depends on your specific oxygen sensor
  // This is a placeholder - consult your sensor's datasheet
  float oxygenPct = map(rawValue, 0, 1023, 0, 25); // Assuming 0-25% range
  return oxygenPct;
}
*/

void checkSafety(float voltage, float pressure, float hydrogenPct) {
  bool alarm = false;
  
  if (voltage > MAX_SAFE_VOLTAGE) {
    Serial.println("ALARM: Voltage exceeds safe limit!");
    alarm = true;
  }
  
  if (pressure > MAX_SAFE_PRESSURE) {
    Serial.println("ALARM: Pressure exceeds safe limit!");
    alarm = true;
  }
  
  if (hydrogenPct > HYDROGEN_ALARM_LEVEL) {
    Serial.println("ALARM: Hydrogen concentration too high!");
    alarm = true;
  }
  
  if (alarm) {
    // Activate visual/audible alarm
    // digitalWrite(ALARM_LED_PIN, HIGH);
    // Optional: Add safety shutdown procedures here
  } else {
    // digitalWrite(ALARM_LED_PIN, LOW);
  }
}

/*
 * Hydrogen Fuel Cell Monitoring System with OLED Display
 * 
 * Monitors:
 * - Voltage output
 * - System pressure
 * - Gas composition (optional)
 * 
 * Added:
 * - SSD1306 OLED display output
 * 
 * Required Libraries:
 * - Adafruit SSD1306
 * - Adafruit GFX
 */

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// OLED display setup
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET    -1  // Reset pin not used
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Define sensor pins
const int VOLTAGE_SENSOR_PIN = A0;    // Analog input for voltage measurement
const int PRESSURE_SENSOR_PIN = A1;   // Analog input for pressure sensor
const int HYDROGEN_SENSOR_PIN = A2;   // Analog input for hydrogen concentration
const int OXYGEN_SENSOR_PIN = A3;     // Analog input for oxygen concentration (optional)

// Calibration values - adjust based on your specific sensors
const float VOLTAGE_DIVIDER_RATIO = 5.0;  // R2/(R1+R2) - adjust for your voltage divider
const float PRESSURE_SENSOR_MAX = 10.0;   // Maximum pressure in kPa your sensor can measure
const float ADC_REFERENCE_VOLTAGE = 5.0;  // Arduino's analog reference voltage

// Safety thresholds
const float MAX_SAFE_VOLTAGE = 50.0;      // Maximum safe voltage (adjust for your system)
const float MAX_SAFE_PRESSURE = 8.0;      // Maximum safe pressure in kPa
const float HYDROGEN_ALARM_LEVEL = 80.0;  // Percentage of hydrogen that triggers alarm

// Sensor warm-up time (in ms)
const unsigned long SENSOR_WARM_UP_TIME = 30000;

// Alarm states
bool voltageAlarm = false;
bool pressureAlarm = false;
bool hydrogenAlarm = false;

void setup() {
  Serial.begin(9600);
  
  // Initialize OLED display
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  
  // Initialize sensors
  pinMode(VOLTAGE_SENSOR_PIN, INPUT);
  pinMode(PRESSURE_SENSOR_PIN, INPUT);
  pinMode(HYDROGEN_SENSOR_PIN, INPUT);
  pinMode(OXYGEN_SENSOR_PIN, INPUT);
  
  // Show initial display buffer on the screen
  display.display();
  delay(2000); // Pause for 2 seconds
  
  // Clear the buffer
  display.clearDisplay();
  
  // Display startup message
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0,0);
  display.println("Hydrogen Fuel Cell");
  display.println("Monitoring System");
  display.println("Initializing...");
  display.display();
  
  // Allow time for sensors to warm up
  unsigned long startTime = millis();
  while (millis() - startTime < SENSOR_WARM_UP_TIME) {
    display.clearDisplay();
    display.setCursor(0,0);
    display.println("Warming up sensors:");
    display.print((SENSOR_WARM_UP_TIME - (millis() - startTime)) / 1000);
    display.println(" sec remaining");
    display.display();
    delay(1000);
  }
  
  display.clearDisplay();
  display.println("System ready");
  display.println("Monitoring...");
  display.display();
  delay(1000);
}

void loop() {
  // Read all sensors
  float voltage = readVoltage();
  float pressure = readPressure();
  float hydrogenPct = readHydrogenPercentage();
  // float oxygenPct = readOxygenPercentage(); // Uncomment if using oxygen sensor
  
  // Check safety thresholds
  checkSafety(voltage, pressure, hydrogenPct);
  
  // Update OLED display
  updateDisplay(voltage, pressure, hydrogenPct);
  
  // Adjust delay based on how often you need readings
  delay(2000); // 2 second delay between readings
}

void updateDisplay(float voltage, float pressure, float hydrogenPct) {
  display.clearDisplay();
  
  // Display header
  display.setTextSize(1);
  display.setCursor(0,0);
  display.println("Fuel Cell Monitor");
  display.drawLine(0, 10, 128, 10, SSD1306_WHITE);
  
  // Display voltage
  display.setCursor(0,15);
  display.print("Voltage: ");
  display.print(voltage, 1);
  display.print(" V");
  if (voltageAlarm) {
    display.print(" !");
  }
  
  // Display pressure
  display.setCursor(0,25);
  display.print("Pressure: ");
  display.print(pressure, 1);
  display.print(" kPa");
  if (pressureAlarm) {
    display.print(" !");
  }
  
  // Display hydrogen concentration
  display.setCursor(0,35);
  display.print("H2: ");
  display.print(hydrogenPct, 1);
  display.print(" %");
  if (hydrogenAlarm) {
    display.print(" !");
  }
  
  // Display status bar at bottom
  display.drawLine(0, 54, 128, 54, SSD1306_WHITE);
  display.setCursor(0,56);
  
  if (voltageAlarm || pressureAlarm || hydrogenAlarm) {
    display.setTextColor(SSD1306_WHITE, SSD1306_BLACK); // Inverted text
    display.print(" ALARM! ");
    display.setTextColor(SSD1306_WHITE);
  } else {
    display.print(" System OK ");
  }
  
  // Display refresh rate
  display.setCursor(90,56);
  display.print("2s");
  
  display.display();
}

float readVoltage() {
  int rawValue = analogRead(VOLTAGE_SENSOR_PIN);
  float voltage = (rawValue * ADC_REFERENCE_VOLTAGE) / 1023.0;
  voltage = voltage * VOLTAGE_DIVIDER_RATIO;
  return voltage;
}

float readPressure() {
  int rawValue = analogRead(PRESSURE_SENSOR_PIN);
  float voltage = (rawValue * ADC_REFERENCE_VOLTAGE) / 1023.0;
  float pressure = (voltage / ADC_REFERENCE_VOLTAGE - 0.04) / 0.09;
  pressure = constrain(pressure, 0, PRESSURE_SENSOR_MAX);
  return pressure;
}

float readHydrogenPercentage() {
  int rawValue = analogRead(HYDROGEN_SENSOR_PIN);
  float voltage = (rawValue * ADC_REFERENCE_VOLTAGE) / 1023.0;
  float hydrogenPct = map(voltage * 100, 0, ADC_REFERENCE_VOLTAGE * 100, 0, 100);
  return hydrogenPct;
}

void checkSafety(float voltage, float pressure, float hydrogenPct) {
  voltageAlarm = false;
  pressureAlarm = false;
  hydrogenAlarm = false;
  
  if (voltage > MAX_SAFE_VOLTAGE) {
    voltageAlarm = true;
  }
  
  if (pressure > MAX_SAFE_PRESSURE) {
    pressureAlarm = true;
  }
  
  if (hydrogenPct > HYDROGEN_ALARM_LEVEL) {
    hydrogenAlarm = true;
  }
}
